(function ($) {

$(function() {
  var googleCSEWatermark = function(id) {
    var f = $(id)[0];
    if (f && (f.query || f['edit-search-block-form--2'] || f['edit-keys'])) {
      var q = f.query ? f.query : (f['edit-search-block-form--2'] ? f['edit-search-block-form--2'] : f['edit-keys']);
      var n = navigator;
      var l = location;
      if (n.platform == 'Win32') {
        q.style.cssText = 'border: 1px solid #7e9db9; padding: 2px;';
      }
      var b = function() {
        if (q.value == '') {
          q.style.background = '#FFFFFF url(https://www.google.com/cse/intl/' + Drupal.settings.googleCSE.language + '/images/google_custom_search_watermark.gif) left no-repeat';
        }
      };
      var f = function() {
        q.style.background = '#ffffff';
      };
      q.onfocus = f;
      q.onblur = b;
//      if (!/[&?]query=[^&]/.test(l.search)) {
        b();
//      }
    }
  };
  googleCSEWatermark('#search-block-form.google-cse');
  googleCSEWatermark('#search-form.google-cse');
  googleCSEWatermark('#google-cse-results-searchbox-form');
});

})(jQuery);
;
(function ($) {
var captcha_status = new Array(); 
var captchaPerformed = false;
Drupal.behaviors.ajax_captcha = {
  attach: function (context) {
  	if(typeof CKEDITOR != 'undefined') {
  	  for (var i in CKEDITOR.instances) {
       CKEDITOR.instances[i].on('focus', function() {jQuery('.captcha').show();});
     }
   }
    
    $('div.ajax-captcha-process-form:not(ajax-captcha-processed)').each(function() {
    	
      var form_id = $(this).find('input[name="form_id"]').attr('value');
      var form_wrapper = $(this);
      
    	form_wrapper.find('textarea').click(function(e) {
        form_wrapper.find('.captcha').slideDown();
      });
      
      // Don't do anything if there is no captcha fieldset
      if (form_wrapper.find('fieldset.captcha').length == 0) {
        return;
      }
      captcha_status[form_id] = 'default';
      if (!captchaPerformed) {
        if (captcha_status[form_id] == 'default') {
          // Disable form submission till AJAX returns
          form_wrapper.find('form').submit(function() {
            if (captcha_status[form_id] != 'loaded') {
              e.preventDefault();
              return false;
            }
            return true;
          });
          captcha_status[form_id] = 'processing';
          // Fetch captcha using ajax
          $.ajax({
            url: Drupal.settings.basePath + 'ajax/ajax-captcha/get-captcha/' + form_id,
            dataType: "html",
            success: function(data) {
              form_wrapper.find('fieldset.captcha').replaceWith(data);
              captchaPerformed = true;
              Drupal.attachBehaviors(form_wrapper.find('fieldset.captcha'));
              captcha_status[form_id] = 'loaded';
              // If captcha is recaptcha re-process the recaptcha and refresh it
              if (form_wrapper.find('input[name="captcha_response"]').attr('value') == 'Google no captcha') {
                var recaptcha_id = 'recaptcha_ajax_api_container_' + form_id;
                if (form_wrapper.find('div.' + recaptcha_id).length == 0) {
                  form_wrapper.find('fieldset.captcha div').before($('<div id="' + recaptcha_id + '"></div>'));
                }
                // load Recaptcha if not already loaded
                if (typeof(Recaptcha) != "object") { 
                  $.ajax({
                    url: 'https://www.google.com/recaptcha/api.js',
                    dataType: "script",
                    success: function() {
                    }
                  });
                }
              }
            }
          });
        }
      }
    }).addClass('ajax-captcha-processed');
  }
};  
})(jQuery);
;
(function($) {
   

})(jQuery);

(function ($) {
$( document ).ready(function() {
  var config = {
            showChars: 100,
            minHideChars: 10,
            ellipsesText: "...",
            moreText: "more",
            lessText: "less",
            onLess: function() {},
            onMore: function() {},
            errMsg: null,
            force: false
        };
        if ($(this).data('jquery.shorten') && !config.force) {
            return false;
        }
        $(this).data('jquery.shorten', true);

        $(document).off("click", '.morelink');

        $(document).on({
            click: function() {

                var $this = $(this);
                if ($this.hasClass('less')) {
                    $this.removeClass('less');
                    $this.html(config.moreText);
                    $this.parent().prev().animate({'height':'0'+'%'}, function () { $this.parent().prev().prev().show(); }).hide('fast', function() {
                        config.onLess();
                      });

                } else {
                    $this.addClass('less');
                    $this.html(config.lessText);
                    $this.parent().prev().animate({'height':'100'+'%'}, function () { $this.parent().prev().prev().hide(); }).show('fast', function() {
                        config.onMore();
                      });
                }
                return false;
            }
        }, '.morelink');

        return jQuery(".forum-post-content .field-item").each(function() {
            var $this = $(this);

            var content = $this.html();
            var contentlen = $this.text().length;
            if (contentlen > config.showChars + config.minHideChars) {
                var c = content.substr(0, config.showChars);
                if (c.indexOf('<') >= 0) // If there's HTML don't want to cut it
                {
                    var inTag = false; // I'm in a tag?
                    var bag = ''; // Put the characters to be shown here
                    var countChars = 0; // Current bag size
                    var openTags = []; // Stack for opened tags, so I can close them later
                    var tagName = null;

                    for (var i = 0, r = 0; r <= config.showChars; i++) {
                        if (content[i] == '<' && !inTag) {
                            inTag = true;

                            // This could be "tag" or "/tag"
                            tagName = content.substring(i + 1, content.indexOf('>', i));

                            // If its a closing tag
                            if (tagName[0] == '/') {


                                if (tagName != '/' + openTags[0]) {
                                    config.errMsg = 'ERROR en HTML: the top of the stack should be the tag that closes';
                                } else {
                                    openTags.shift(); // Pops the last tag from the open tag stack (the tag is closed in the retult HTML!)
                                }

                            } else {
                                // There are some nasty tags that don't have a close tag like <br/>
                                if (tagName.toLowerCase() != 'br') {
                                    openTags.unshift(tagName); // Add to start the name of the tag that opens
                                }
                            }
                        }
                        if (inTag && content[i] == '>') {
                            inTag = false;
                        }

                        if (inTag) { bag += content.charAt(i); } // Add tag name chars to the result
                        else {
                            r++;
                            if (countChars <= config.showChars) {
                                bag += content.charAt(i); // Fix to ie 7 not allowing you to reference string characters using the []
                                countChars++;
                            } else // Now I have the characters needed
                            {
                                if (openTags.length > 0) // I have unclosed tags
                                {
                                    //console.log('They were open tags');
                                    //console.log(openTags);
                                    for (j = 0; j < openTags.length; j++) {
                                        //console.log('Cierro tag ' + openTags[j]);
                                        bag += '</' + openTags[j] + '>'; // Close all tags that were opened

                                        // You could shift the tag from the stack to check if you end with an empty stack, that means you have closed all open tags
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    c = $('<div/>').html(bag + '<span class="ellip">' + config.ellipsesText + '</span>').html();
                }else{
                    c+=config.ellipsesText;
                }

                var html = '<div class="shortcontent">' + c +
                    '</div><div class="allcontent">' + content +
                    '</div><span><a href="javascript://nop/" class="morelink">' + config.moreText + '</a></span>';

                $this.html(html);
                $this.find(".allcontent").hide(); // Hide all text
                $('.shortcontent p:last', $this).css('margin-bottom', 0); //Remove bottom margin on last paragraph as it's likely shortened
            }
        });

});
})(jQuery);;
(function ($) {

Drupal.behaviors.commentNotify = {
  attach: function (context) {
    $('#edit-notify', context)
      .bind('change', function() {
        $('#edit-notify-type', context)
          [this.checked ? 'show' : 'hide']()
          .find('input[type=checkbox]:checked').attr('checked', 'checked');
      })
      .trigger('change');
  }
}

})(jQuery);
;
